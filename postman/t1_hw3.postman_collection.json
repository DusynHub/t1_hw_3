{
	"info": {
		"_postman_id": "048f5a3d-b1c5-4b70-b325-4ce3c41d5b0a",
		"name": "t1_hw3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25271283"
	},
	"item": [
		{
			"name": "validation",
			"item": [
				{
					"name": "Post user wrong email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('must be a well-formed email address')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"user3\",\n    \"email\" : \"wrongemail\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post user with blank email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('message [email]]; default message [must not be blank]')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"user3\",\n    \"email\" : \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test user 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"user1\"').to.eql('user1');",
							"});",
							"",
							"pm.test(\"Test user 'email' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData.email, '\"email\" must be \"user1@email.com\"').to.eql('user1@email.com');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\" : \"user1\",\n    \"email\" : \"user1@email.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post user1 duplicate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 409\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test error response 'reason' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('reason');",
							"    pm.expect(jsonData.reason).equals('Integrity constraint has been violated.')",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\" : \"user1\",\n    \"email\" : \"user1@email.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test user 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"user2\"').to.eql('user2');",
							"});",
							"",
							"pm.test(\"Test user 'email' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData.email, '\"email\" must be \"user2@email.com\"').to.eql('user2@email.com');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\" : \"user2\",\n    \"email\" : \"user2@email.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post user3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test user 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"user3\"').to.eql('user3');",
							"});",
							"",
							"pm.test(\"Test user 'email' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData.email, '\"email\" must be \"user3@email.com\"').to.eql('user3@email.com');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\" : \"user3\",\n    \"email\" : \"user3@email.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test user 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"user3\"').to.eql('user3');",
							"});",
							"",
							"pm.test(\"Test user 'email' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData.email, '\"email\" must be \"user3@coooooooooooool.com\"').to.eql('user3@coooooooooooool.com');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\" : \"user3@coooooooooooool.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/4",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test product 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"user1\"').to.eql('user1');",
							"});",
							"",
							"pm.test(\"Test product 'email' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData.email, '\"email\" must be \"user1@email.com\"').to.eql('user1@email.com');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test product 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"user2\"').to.eql('user2');",
							"});",
							"",
							"pm.test(\"Test product 'email' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData.email, '\"email\" must be \"user2@email.com\"').to.eql('user2@email.com');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post order1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test order 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"order1\"').to.eql('order1');",
							"});",
							"",
							"pm.test(\"Test order 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"description_to_order_1\"').to.eql('description_to_order_1');",
							"});",
							"",
							"pm.test(\"Test order 'status' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData.status, '\"status\" must be \"CREATED\"').to.eql('CREATED');",
							"});",
							"",
							"pm.test(\"Test product 'owner' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('owner');",
							"    pm.expect(jsonData.owner).to.have.property('name');",
							"    pm.expect(jsonData.owner.name, '\"owner.name\" field must be \"user1\"').to.eql(\"user1\");    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\" : \"order1\",\n    \"description\" : \"description_to_order_1\",\n    \"status\" : \"CREATED\",\n    \"owner\" : 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update order1 status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test order 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"order1\"').to.eql('order1');",
							"});",
							"",
							"pm.test(\"Test order 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"description_to_order_1\"').to.eql('description_to_order_1');",
							"});",
							"",
							"pm.test(\"Test order 'status' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData.status, '\"status\" must be \"PENDING\"').to.eql('PENDING');",
							"});",
							"",
							"pm.test(\"Test product 'owner' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('owner');",
							"    pm.expect(jsonData.owner).to.have.property('name');",
							"    pm.expect(jsonData.owner.name, '\"owner.name\" field must be \"user1\"').to.eql(\"user1\");    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"status\" : \"PENDING\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update order1 owner user 1 to owner user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test order 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"order1\"').to.eql('order1');",
							"});",
							"",
							"pm.test(\"Test order 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"description_to_order_1\"').to.eql('description_to_order_1');",
							"});",
							"",
							"pm.test(\"Test order 'status' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData.status, '\"status\" must be \"PENDING\"').to.eql('PENDING');",
							"});",
							"",
							"pm.test(\"Test product 'owner' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('owner');",
							"    pm.expect(jsonData.owner).to.have.property('name');",
							"    pm.expect(jsonData.owner.name, '\"owner.name\" field must be \"user2\"').to.eql(\"user2\");    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"owner\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8085",
			"type": "string"
		}
	]
}